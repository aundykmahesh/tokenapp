{"version":3,"sources":["reportWebVitals.ts","stores/commonstore.ts","API/agent.ts","stores/userstore.ts","stores/stores.ts","stores/tokenstore.ts","layout/homepage.tsx","layout/Form/CommonTextInput.tsx","layout/LoginForm.tsx","layout/loadcomponent.tsx","layout/Form/CreateToken.tsx","layout/Pagination.tsx","layout/TokensDashboard.tsx","layout/NavigationBar.tsx","layout/App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CommonStore","error","token","window","localStorage","getItem","apploaded","setServerError","err","setToken","setAppLoaded","makeAutoObservable","this","reaction","setItem","removeItem","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","numofdays","newdate","setDate","axios","defaults","baseURL","process","interceptors","request","use","config","store","commonstore","headers","Authorization","response","a","data","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","responseBody","requests","url","get","body","post","agent","Tokens","list","generatetoken","urlval","disabletoken","tokenid","enabletoken","validatetoken","Account","current","login","user","userStore","logout","getUser","runInAction","console","log","displayName","value","result","tokenstore","loading","submitting","tokens","paginatedTokens","setLoadingStatus","setSubmittingStatus","loadPaginatedTokens","pagenumber","loadAllTokens","slice","forEach","element","generateToken","input","appurl","setTokenStatus","disableToken","find","c","guid","enableToken","userstore","storeContext","createContext","useStore","useContext","observer","Segment","inverted","textAlign","vertical","className","Container","text","Header","as","isLoggedIn","content","Button","Link","to","size","CommonTextInput","props","useField","name","field","meta","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","values","setErrors","catch","handleSubmit","isSubmitting","autoComplete","placeholder","type","render","style","marginBottom","positive","fluid","LoadingComponent","Dimmer","active","Loader","CreateToken","ValidationSchema","Yup","required","validationSchema","tokenarranylength","handleActivityChangeStatus","e","parseInt","currentTarget","innerText","totalpages","index","menuitems","Menu","Item","toString","onClick","floated","pagination","useState","target","setTarget","useEffect","id","removelength","substring","Group","Table","celled","Row","HeaderCell","Body","map","tokenitem","Cell","appUrl","tokenString","formatDate","createdDate","AddDays","disabled","Footer","colSpan","Pagination","fixed","NavLink","exact","src","alt","marginRight","position","finally","hideProgressBar","path","component","homepage","marginTop","TokensDashboard","LoginForm","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.018056bf.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/servererror\";\n\n\nexport default class CommonStore{\n\n    error: ServerError | null = null;\n    token : string | null = window.localStorage.getItem('jwt');\n    apploaded=false;\n\n    constructor(){\n        makeAutoObservable(this);\n\n        //mobx reaction. This reacts when token value changes\n        reaction(\n            () => this.token,\n            token => {\n                if(token){\n                    window.localStorage.setItem('jwt', token);\n                }\n                else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (err: ServerError) => {\n        this.error = err;\n    }\n\n\n    setToken = (token: string|null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.apploaded = true;\n    }\n\n    //https://stackoverflow.com/questions/23593052/format-javascript-date-as-yyyy-mm-dd\n    formatDate(date:string) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [day, month, year].join('-');\n    }\n\n    AddDays(date:Date, numofdays: number){\n        var newdate = new Date(date);\n        newdate.setDate(newdate.getDate()+numofdays)\n        return newdate;\n    }\n\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"..\";\nimport { Token, TokenFormValue } from \"../models/tokenmodel\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/stores\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay);\n    })\n}\n\n//this adds token to all header if logged in\naxios.interceptors.request.use(config => {\n    if(store.commonstore.token) {\n        config.headers.Authorization = `Bearer ${store.commonstore.token}`\n    }\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if(process.env.NODE_ENV==\"development\") await sleep(1000);\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error(\"Unauthorized request\");\n            break;\n        case 404:\n           history.push('/not-found');\n            break;\n        case 500:\n            toast.error(\"server not found\");\n            store.commonstore.setServerError(data);\n            history.push(\"/server-error\");\n            break;\n        default:\n            break;\n    }\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\n}\n//use back tick to use string literal\nconst Tokens = {\n    list: () => requests.get<Token[]>('/token/tokens'),\n    generatetoken: (urlval: TokenFormValue) => requests.post<Token>('/token/generate', urlval),\n    disabletoken: (tokenid: string) => requests.post(`/token/disabletoken?tokenid=${tokenid}`, tokenid),\n    enabletoken: (tokenid: string) => requests.post(`/token/enabletoken?tokenid=${tokenid}`, tokenid),\n    validatetoken: (token: TokenFormValue) => requests.post('/token/validate', token)\n}\n\nconst Account = {\n    current: () => requests.get<User>('/accounts'),\n    login: (user: UserFormValues) => requests.post<User>('/accounts/login', user),\n}\n\nconst agent = {\n    Tokens,\n    Account\n}\n\nexport default agent;","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../API/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./stores\";\nimport { history } from \"..\";\n\n\nexport default class userStore{\n    user : User | null=null;\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn(){\n        return !!this.user?.displayName;\n    }\n\n    async login(value : UserFormValues){\n        try {\n            const result = await agent.Account.login(value);\n            store.commonstore.setToken(result.token);\n            runInAction(() => this.user = result);\n            history.push('/tokens');\n             console.log(result);\n        } catch (error) {\n            throw error;\n        }\n\n    }\n\n    logout = () => {\n        store.commonstore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user=null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport CommonStore from \"./commonstore\";\nimport TokenStore from \"./tokenstore\";\nimport userStore from \"./userstore\";\n\ninterface Store{\n    tokenstore : TokenStore;\n    commonstore : CommonStore;\n    userstore: userStore;\n}\n\nexport const store : Store = {\n    tokenstore : new TokenStore(),\n    userstore: new userStore(),\n    commonstore: new CommonStore()\n}\n\nexport const storeContext = createContext(store);\n\nexport function useStore(){\n    return useContext(storeContext)\n}","import { makeAutoObservable} from \"mobx\";\nimport agent from \"../API/agent\";\nimport { Token, TokenFormValue } from \"../models/tokenmodel\";\n\n\nexport default class TokenStore {\n    loading = false;\n    submitting = false;\n    tokens: Token[] = [];\n    paginatedTokens : Token[] = [];\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setLoadingStatus = (status: boolean) => {\n        this.loading = status;\n    }\n\n    setSubmittingStatus = (status: boolean) => {\n        this.submitting = status;\n    }\n\n    loadPaginatedTokens = async (pagenumber : number) => {\n        if(this.tokens.length==0) await this.loadAllTokens();\n        this.paginatedTokens = this.tokens.slice((pagenumber-1)*10,(pagenumber)*10);\n    }\n\n    loadAllTokens = async () => {\n        this.setLoadingStatus(true);\n        try {\n            await agent.Tokens.list().then(response => {\n                //let activty: Activity[] = [];\n                this.tokens = [];\n                response.forEach(element => {\n                    this.setToken(element);\n                });\n                //this.setactivities(activty);\n                this.setLoadingStatus(false);\n\n            });\n        } catch (error) {\n            console.log(error);\n            this.setLoadingStatus(false);\n        }\n    }\n\n    generateToken = async (urlval: string) => {\n        this.setLoadingStatus(true);\n        try {\n            var input:TokenFormValue={appurl:urlval};\n            await agent.Tokens.generatetoken(input).then((response) => {\n                this.setToken(response);\n            });\n            this.setLoadingStatus(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingStatus(false);\n        }\n    }\n\n    setToken = (element: Token) => {\n        //activty.push(element);\n        //this.tokenRegistry.set(element.id, element);\n        // const date = format(element.createdDate!, 'dd MMM yyyy');\n        // element.createdDate = new Date(date);\n        element.status = this.setTokenStatus(element.status);\n        this.tokens.push(element);\n        // console.log(this.tokens.length);\n    }\n\n    disableToken = async (tokenid: string) => {\n        this.setSubmittingStatus(true);\n        try {\n            await agent.Tokens.disabletoken(tokenid);\n            this.tokens.find(c => c.guid === tokenid)!.status = this.setTokenStatus(\"2\");\n            this.setSubmittingStatus(false);\n        }\n        catch (error) {\n            console.log(error);\n            this.setSubmittingStatus(false);\n        }\n    }\n\n    enableToken = async (tokenid: string) => {\n        this.setSubmittingStatus(true);\n        try {\n            await agent.Tokens.enabletoken(tokenid);\n            this.tokens.find(c => c.guid === tokenid)!.status = this.setTokenStatus(\"0\");\n            this.setSubmittingStatus(false);\n        }\n        catch (error) {\n            console.log(error);\n            this.setSubmittingStatus(false);\n        }\n    }\n\n    setTokenStatus = (status: string) => {\n        if (status == \"0\") return \"Enabled\";\n        if (status == \"1\") return \"Expired\";\n        return \"Disabled\";\n    }\n\n\n\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Header, Segment, Button } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/stores\";\n\nexport default observer(function HomePage() {\n\n    const { userstore } = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    Token App\n                </Header>\n                {userstore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Token app' />\n                        <Button as={Link} to='/tokens' size='huge' inverted>\n                            Go to Tokens Dashboard!\n                        </Button>\n                    </>\n                ) : (\n                    <Button as={Link} to='/login' size='huge' inverted>\n                        Login!\n                    </Button>\n                )}\n\n            </Container>\n\n        </Segment>\n    )\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Label } from \"semantic-ui-react\";\nimport Form from \"semantic-ui-react/dist/commonjs/collections/Form\";\n\n\nexport interface Props{\n    placeholder : string;\n    name: string;\n    type?: string;\n    label?: string;\n    color?:string;\n}\n\nexport default function CommonTextInput(props:Props) {\n    const [field,meta] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}  />\n            {meta.touched && meta.error ? (\n                <Label basic color=\"red\">{meta.error}</Label>\n            ):null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/stores\";\nimport CommonTextInput from \"./Form/CommonTextInput\";\n\n\nexport default observer (function LoginForm() {\n    const {userstore} = useStore();\n    return(\n        //using formik seterrors \n        <Formik initialValues={{email: '', password:'', error:null}} \n            onSubmit={(values,{setErrors}) => userstore.login(values).catch(error => \n                setErrors({error :'Invalid login or password'}))}>\n                {\n                    //this is formik issubmitting\n                    ({handleSubmit, isSubmitting, errors}) => (\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                            <CommonTextInput name='email' placeholder='Email' \n                               color={errors.error && 'red'}\n                            />\n                            <CommonTextInput name='password' placeholder='Password' type='password' />\n                            <ErrorMessage \n                                name='error'\n                                render = {() => \n                                    <Label style={{marginBottom: 10}} basic\n                                    color='red' content={errors.error} />\n                                }\n                            />\n                            <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                        </Form>\n                    )\n                }\n        </Formik>\n    )\n    \n})","import React from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\n\ninterface Props{\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content='Loading...'} : Props){\n    return(\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { ErrorMessage, Formik } from \"formik\";\nimport React from \"react\";\nimport { Button, Form, Label } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/stores\";\nimport CommonTextInput from \"./CommonTextInput\";\nimport * as Yup from \"yup\";\n\n\nexport default function CreateToken(){\n    const{tokenstore} = useStore();\n    const { generateToken} = tokenstore;\n\n    const ValidationSchema = Yup.object({\n        url: Yup.string().required(\"The URL is required\").url(\"Should be of proper URL format\")\n    });\n\n    return(\n        <Formik initialValues={{url: '', error:null}} validationSchema={ValidationSchema}\n            onSubmit={(values,{setErrors}) => generateToken(values.url).catch(error => \n                setErrors({error :'Invalid URL'}))}>\n                {\n                    //this is formik issubmitting\n                    ({handleSubmit, isSubmitting, errors}) => (\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                            <CommonTextInput name='url' placeholder='URL' \n                               color={errors.error && 'red'}\n                            />\n                            <ErrorMessage \n                                name='error'\n                                render = {() => \n                                    <Label style={{marginBottom: 10}} basic\n                                    color='red' content={errors.error} />\n                                }\n                            />\n                            <Button loading={isSubmitting} positive content='Create Token' type='submit' fluid />\n                        </Form>\n                    )\n                }\n        </Formik>        \n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react'\nimport { Menu, Pagination } from 'semantic-ui-react'\nimport { useStore } from '../stores/stores'\n\ninterface Props{\n    tokenarranylength:number;\n}\n\nexport default observer (function PaginationForToken({tokenarranylength} : Props){\n\nconst {tokenstore} = useStore();\n\nfunction handleActivityChangeStatus(e: SyntheticEvent<HTMLElement>) {\n  tokenstore.loadPaginatedTokens(parseInt(e.currentTarget.innerText))\n}\nlet totalpages=(tokenarranylength/10);\nif(tokenarranylength%10>0) totalpages +=1;\nlet index=0;\nlet menuitems=[];\nfor (index = 1; index <= totalpages; index++) {\n  var local=index;\n  menuitems.push(<Menu.Item as='a' key={index} name={index.toString()} \n    onClick={(e) => { handleActivityChangeStatus(e) }}>\n      {index}\n    </Menu.Item>)\n}\nreturn <Menu floated='right' pagination>{menuitems}</Menu> ;\n\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useEffect, useState } from 'react'\nimport { Button, Icon, Menu, Segment, Table } from 'semantic-ui-react'\nimport { useStore } from '../stores/stores'\nimport LoadingComponent from './loadcomponent';\nimport { history } from \"..\";\nimport CreateToken from './Form/CreateToken';\nimport PaginationForToken from './Pagination';\n\n\n\n\nexport default observer(function TokensDashboard() {\n    const { tokenstore, userstore,commonstore } = useStore();\n    const { loadAllTokens, paginatedTokens: tokens, disableToken, submitting} = tokenstore;\n    const { user } = userstore;\n    const [target, setTarget] = useState('');\n\n    // useEffect(() => {\n    //     if (tokenstore.tokens.length <= 1) loadAllTokens();\n    // }, [tokenstore.tokens.length, loadAllTokens])\n\n    useEffect(() => {\n       tokenstore.loadPaginatedTokens(1);\n    }, [tokenstore.loadPaginatedTokens])\n\n    if (user == null) history.push('/');\n\n    if (tokenstore.loading) return <LoadingComponent content='Loading app......' />\n\n    function handleActivityChangeStatus(e: SyntheticEvent<HTMLButtonElement>, id: string) {\n        setTarget(e.currentTarget.name);\n        if(e.currentTarget.innerText ==\"Enable Token\"){\n            var removelength = 'btnenable_'.length;\n            tokenstore.enableToken(id.substring(removelength));\n        }\n        else{\n            disableToken(id);\n        }\n    }\n\n    return (\n\n        <Segment.Group>\n            <Segment>\n                <CreateToken />\n                </Segment>\n\n            <Segment>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>URL</Table.HeaderCell>\n                            <Table.HeaderCell>Token</Table.HeaderCell>\n                            <Table.HeaderCell>Created Date</Table.HeaderCell>\n                            <Table.HeaderCell>Expiry Date</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        <>\n                            {\n                                tokens.map(tokenitem => (\n                                    <Table.Row key={tokenitem.guid}>\n                                        <Table.Cell>{tokenitem.appUrl}</Table.Cell>\n                                        <Table.Cell>{tokenitem.tokenString}</Table.Cell>\n                                        <Table.Cell>{commonstore.formatDate(tokenitem.createdDate.toString())}</Table.Cell>\n                                        <Table.Cell>{\n                                            commonstore.formatDate(\n                                                commonstore.AddDays(tokenitem.createdDate,7).toString()\n                                                )\n                                        }</Table.Cell>\n                                        <Table.Cell>{tokenitem.status}</Table.Cell>\n                                        <Table.Cell>\n                                        <Button onClick={(e) => { handleActivityChangeStatus(e, `btnenable_${tokenitem.guid}`) }}\n                                                name= {`btnenable_${tokenitem.guid}`}\n                                                loading={submitting && target === `btnenable_${tokenitem.guid}`}\n                                                disabled={tokenitem.status != \"Enabled\" ? false : true}\n                                                floated='right'\n                                                content='Enable Token'\n                                                color='red'></Button>\n                                            <Button onClick={(e) => { handleActivityChangeStatus(e, tokenitem.guid) }}\n                                                name={tokenitem.guid}\n                                                loading={submitting && target === tokenitem.guid}\n                                                disabled={tokenitem.status == \"Enabled\" ? false : true}\n                                                floated='right'\n                                                content='Disable Token'\n                                                color='red'></Button>\n                                        </Table.Cell>\n                                    </Table.Row>\n                                ))\n                            }\n                        </>\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan=\"6\">\n                                <PaginationForToken tokenarranylength={tokenstore.tokens.length} />\n\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Footer>\n                </Table>\n            </Segment>\n\n        </Segment.Group>\n\n\n    )\n}\n)","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Menu, Button, Container} from \"semantic-ui-react\";\nimport { useStore } from \"../stores/stores\";\n\n\nexport default observer(function NavigationBar() {\n    const { userstore } = useStore();\n\n    return (\n        <Menu inverted fixed=\"top\">\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact >\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/tokens' exact name=\"Tokens\" />\n                {userstore.user &&\n                    <Menu.Item position='right'>\n                        <Button positive onClick={userstore.logout} content=\"Logout\" />\n                    </Menu.Item>\n                }\n\n            </Container>\n\n        </Menu>\n    )\n})","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\n\nimport { ToastContainer } from 'react-toastify';\nimport { Route, Switch } from 'react-router-dom';\nimport { useStore } from '../stores/stores';\nimport homepage from './homepage';\nimport LoginForm from './LoginForm';\nimport TokensDashboard from './TokensDashboard';\nimport NavigationBar from './NavigationBar';\n\n\nfunction App() {\n  const {userstore, commonstore} = useStore();\n\n  useEffect(() => {\n   if(commonstore.token){\n     userstore.getUser().finally(() => commonstore.setAppLoaded());\n   }\n   else{\n     commonstore.setAppLoaded();\n   }\n  }, [commonstore,userstore])\n\n  // if(commonstore.apploaded) <LoadingComponenet content='loading app....' />\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <Route exact path=\"/\" component={homepage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <>\n            <NavigationBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n              {/* <Route exact path=\"/activities\" component={Token} />\n              <Route key={location.key} path={[\"/createactivity\", \"/manage/:id\"]} component={ActivityFom} />\n              <Route path=\"/Errors\" component={TestErrors} />\n              <Route path=\"/server-error\" component={ServerError} /> */}\n              <Route exact path=\"/tokens\" component={TokensDashboard} />\n              <Route path=\"/login\" component={LoginForm} />\n\n              </Switch>\n              \n            </Container>\n          </>\n        )}\n      />\n\n    </>\n  );\n}\n//add mobx observer to make it an observer, else cant write back to state variables\nexport default observer(App);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './layout/styles.css';\nimport reportWebVitals from './reportWebVitals';\nimport { createBrowserHistory } from 'history';\nimport { Router } from 'react-router-dom';\nimport { store, storeContext } from './stores/stores';\nimport App from './layout/App';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <storeContext.Provider value={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </storeContext.Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}